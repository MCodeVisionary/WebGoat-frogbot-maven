name: 'maven-webgoat'
on:
  push:
    branches:
      - "**"
  pull_request:
    types: 
      - closed
    branches:
      - main
  workflow_dispatch:

jobs:
 mvn-build-and-publish:
   runs-on: ubuntu-latest
   env:
     BUILD_NAME: 'maven-webgoat'
     JFROG_BUILD_STATUS: PASS
   steps:
     - name: Checkout
       uses: actions/checkout@v4
     - name: Set up JDK 17
       uses: actions/setup-java@v5
       with:
        java-version: '17'
        distribution: 'temurin'
     - name: JFrog CLI setup üê∏
       uses: jfrog/setup-jfrog-cli@v4
       env:
        JF_URL: ${{ secrets.JF_URL }}
        JF_ACCESS_TOKEN: ${{secrets.JF_ACCESS_TOKEN}}
        JF_GIT_TOKEN: ${{ secrets.JF_GIT_TOKEN }}
     - name: Health check JFrog Artifactory instance üê∏
       run: |
        jf --version
        jf rt ping
        # jf config show
     - name: Fix Code Formatting with Spotless
       run: mvn spotless:apply
     - name: Build Maven Package
       run: |
         jf mvnc --repo-resolve-releases alpha-mvn-virtual --repo-resolve-snapshots alpha-mvn-virtual --repo-deploy-releases alpha-mvn-virtual --repo-deploy-snapshots alpha-mvn-virtual
         jf mvn clean install -f pom.xml -Dmaven.test.skip=true -Dartifactory.publish.artifacts=true --build-name ${{env.BUILD_NAME}} --build-number ${{github.run_number}}
     - name: Login to JFrog Docker repo
       uses: docker/login-action@v3
       with:
        registry: ${{ secrets.JF_URL }}
        username: ${{ secrets.JF_USER }}
        password: ${{ secrets.JF_PASSWORD }}
     - name: Docker Build üê≥üê∏ and scan
       run: |
         jf docker build . -t soleng.jfrog.io/alpha-mvn-virtual/webgoat-maven:${{github.run_number}}
         jf docker scan soleng.jfrog.io/alpha-mvn-virtual/webgoat-maven:${{github.run_number}}
         jf docker push soleng.jfrog.io/alpha-mvn-virtual/webgoat-maven:${{github.run_number}}
     - name: Audit
       run: |
         jf audit
     - name: Publish build build-info
       run: |
         # Collect and store environment variables in the build-info
         jf rt bce ${{env.BUILD_NAME}} ${{github.run_number}}
         # Collect and store VCS details in the build-info
         jf rt bag ${{env.BUILD_NAME}} ${{github.run_number}}
         # Publish the build-info to Artifactory
         jf rt bp ${{env.BUILD_NAME}} ${{github.run_number}}
         # Scan the published build-info with Xray
         jf rt bs ${{env.BUILD_NAME}} ${{github.run_number}}
